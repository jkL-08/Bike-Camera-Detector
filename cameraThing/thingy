# Will be using camelCasing because thats what im comfortable with

import cv2
import numpy as np
import time
import winsound
import pygame

lastBeep = 0

detectionsStrings = ['person', 'bicycle', 'car', 'motorbike', 'truck', 'fire hydrant', 'stop sign', 'bird', 'cat', 'dog', 'horse', 'pineapple', 'sheep', 'cow', 'elephant', 'toilet', 'microwave', 'fridge']

# Load class labels
with open('cameraThing\cocos.names', 'r') as f:
    classes = [line.strip() for line in f.readlines()]

# Load YOLO
net = cv2.dnn.readNet('cameraThing\yolov3.weights', 'cameraThing\yolov3.cfg')
layerNames = net.getUnconnectedOutLayersNames()

# Start webcam
cap = cv2.VideoCapture(1)

while True:
    
    # load sound
    pygame.mixer.init()
    stop = pygame.mixer.Sound("cameraThing\Stop!.wav")
    
    ret, frame = cap.read()
    if not ret:
        break

    height, width = frame.shape[:2]

    # Create blob and do forward pass
    blob = cv2.dnn.blobFromImage(frame, 1/255, (416, 416), swapRB = True, crop = False)
    net.setInput(blob)
    outs = net.forward(layerNames)

    boxes, confidences, classIDs = [], [], []
    
    # Parse YOLO output
    for out in outs:
        for detection in out:
            scores = detection[5:]
            classID = np.argmax(scores)
            confidence = scores[classID]

            if confidence > 0.5:
                centerX, centerY, w, h = (detection[0:4] * [width, height, width, height]).astype('int')
                x = int(centerX - w / 2)
                y = int(centerY - h / 2)

                boxes.append([x, y, int(w), int(h)])
                confidences.append(float(confidence))
                classIDs.append(classID)

    # Apply Non-max Suppression
    indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

    if len(indexes) > 0:
        for i in indexes:
         i = i[0] if isinstance(i, (list, tuple, np.ndarray)) else i
         x, y, w, h = boxes[i]
         label = str(classes[classIDs[i]])
         confidence = confidences[i]
         cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
         cv2.putText(frame, f'{label} {confidence:.2f}', (x, y - 10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)
         # distance calculator
    
        boxArea = w * h
    
        if label in detectionsStrings:
            if boxArea > 80000:
                depth = "veryClose"
            elif boxArea > 40000:
                depth = "Close"
            elif boxArea > 15000:
                depth = "Medium"
            else:
                depth = "veryFar"
                    
            if depth == "veryClose":
                stop.play()
            print(f"{label} is {depth}")


    cv2.imshow("YOLO Detection", frame)
    if cv2.waitKey(1) == ord('q'):
        break
        
cap.release()
cv2.destroyAllWindows()
